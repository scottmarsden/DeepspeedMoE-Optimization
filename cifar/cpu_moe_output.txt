
-------------------------- DeepSpeed Flops Profiler --------------------------
Profile Summary at step 2:
Notations:
data parallel size (dp_size), model parallel size(mp_size),
number of parameters (params), number of multiply-accumulate operations(MACs),
number of floating-point operations (flops), floating-point operations per second (FLOPS),
fwd latency (forward propagation latency), bwd latency (backward propagation latency),
step (weights update latency), iter latency (sum of fwd, bwd and step latency)

world size:                                                   4       
data parallel size:                                           4       
model parallel size:                                          1       
batch size per GPU:                                           4       
params per gpu:                                               91.24 k 
params of model = params per GPU * mp_size:                   91.24 k 
fwd MACs per GPU:                                             2.67 MMACs
fwd flops per GPU:                                            5.42 M  
fwd flops of model = fwd flops per GPU * mp_size:             5.42 M  
fwd latency:                                                  10.31 ms
fwd FLOPS per GPU = fwd flops per GPU / fwd latency:          525.6 MFLOPS
bwd latency:                                                  9.29 ms 
bwd FLOPS per GPU = 2 * fwd flops per GPU / bwd latency:      1.17 GFLOPS
fwd+bwd FLOPS per GPU = 3 * fwd flops per GPU / (fwd+bwd latency):   829.3 MFLOPS
step latency:                                                 24.22 ms
iter latency:                                                 43.83 ms
FLOPS per GPU = 3 * fwd flops per GPU / iter latency:         370.96 MFLOPS
samples/second:                                               365.08  

----------------------------- Aggregated Profile per GPU -----------------------------
Top 1 modules in terms of params, MACs or fwd latency at different model depths:
depth 0:
    params      - {'Net': '91.24 k'}
    MACs        - {'Net': '2.67 MMACs'}
    fwd latency - {'Net': '10.18 ms'}
depth 1:
    params      - {'Linear': '59.13 k'}
    MACs        - {'Conv2d': '2.37 MMACs'}
    fwd latency - {'ModuleList': '8.1 ms'}
depth 2:
    params      - {'MoE': '29.23 k'}
    MACs        - {'MoE': '59.14 KMACs'}
    fwd latency - {'MoE': '8.1 ms'}
depth 3:
    params      - {'MOELayer': '29.23 k'}
    MACs        - {'MOELayer': '59.14 KMACs'}
    fwd latency - {'MOELayer': '8.03 ms'}
depth 4:
    params      - {'Experts': '28.56 k'}
    MACs        - {'Experts': '56.45 KMACs'}
    fwd latency - {'TopKGate': '5.88 ms'}
depth 5:
    params      - {'ModuleList': '28.56 k'}
    MACs        - {'ModuleList': '56.45 KMACs'}
    fwd latency - {'ModuleList': '542.16 us'}

------------------------------ Detailed Profile per GPU ------------------------------
Each module profile is listed after its name in the following order: 
params, percentage of total params, MACs, percentage of total MACs, fwd latency, percentage of total fwd latency, fwd FLOPS

Note: 1. A module can have torch.nn.module or torch.nn.functional to compute logits (e.g. CrossEntropyLoss). They are not counted as submodules, thus not to be printed out. However they make up the difference between a parent's MACs (or latency) and the sum of its submodules'.
2. Number of floating-point operations is a theoretical estimation, thus FLOPS computed using that could be larger than the maximum system throughput.
3. The fwd latency listed in the top module's profile is directly captured at the module forward function in PyTorch, thus it's less than the fwd latency shown above which is captured in DeepSpeed.

Net(
  91.24 k, 100.00% Params, 2.67 MMACs, 100.00% MACs, 10.18 ms, 100.00% latency, 532.13 MFLOPS, 
  (conv1): Conv2d(456, 0.50% Params, 1.41 MMACs, 52.93% MACs, 244.62 us, 2.40% latency, 11.61 GFLOPS, 3, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(0, 0.00% Params, 0 MACs, 0.00% MACs, 218.15 us, 2.14% latency, 115.59 MFLOPS, kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(2.42 k, 2.65% Params, 960.0 KMACs, 36.01% MACs, 306.61 us, 3.01% latency, 6.28 GFLOPS, 6, 16, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(48.12 k, 52.74% Params, 192.0 KMACs, 7.20% MACs, 296.83 us, 2.91% latency, 1.29 GFLOPS, in_features=400, out_features=120, bias=True)
  (fc2): Linear(10.16 k, 11.14% Params, 40.32 KMACs, 1.51% MACs, 244.62 us, 2.40% latency, 329.66 MFLOPS, in_features=120, out_features=84, bias=True)
  (moe_layer_list): ModuleList(
    29.23 k, 32.04% Params, 59.14 KMACs, 2.22% MACs, 8.1 ms, 79.56% latency, 15.93 MFLOPS, 
    (0): MoE(
      29.23 k, 32.04% Params, 59.14 KMACs, 2.22% MACs, 8.1 ms, 79.56% latency, 15.93 MFLOPS, 
      (deepspeed_moe): MOELayer(
        29.23 k, 32.04% Params, 59.14 KMACs, 2.22% MACs, 8.03 ms, 78.90% latency, 16.07 MFLOPS, 
        (gate): TopKGate(
          672, 0.74% Params, 2.69 KMACs, 0.10% MACs, 5.88 ms, 57.71% latency, 925.81 KFLOPS, 
          (wg): Linear(672, 0.74% Params, 2.69 KMACs, 0.10% MACs, 122.79 us, 1.21% latency, 43.78 MFLOPS, in_features=84, out_features=8, bias=False)
        )
        (experts): Experts(
          28.56 k, 31.30% Params, 56.45 KMACs, 2.12% MACs, 783.68 us, 7.70% latency, 144.06 MFLOPS, 
          (deepspeed_experts): ModuleList(
            28.56 k, 31.30% Params, 56.45 KMACs, 2.12% MACs, 542.16 us, 5.32% latency, 208.23 MFLOPS, 
            (0): Linear(7.14 k, 7.83% Params, 14.11 KMACs, 0.53% MACs, 146.15 us, 1.44% latency, 193.12 MFLOPS, in_features=84, out_features=84, bias=True)
            (1): Linear(7.14 k, 7.83% Params, 14.11 KMACs, 0.53% MACs, 135.9 us, 1.33% latency, 207.68 MFLOPS, in_features=84, out_features=84, bias=True)
            (2): Linear(7.14 k, 7.83% Params, 14.11 KMACs, 0.53% MACs, 127.32 us, 1.25% latency, 221.69 MFLOPS, in_features=84, out_features=84, bias=True)
            (3): Linear(7.14 k, 7.83% Params, 14.11 KMACs, 0.53% MACs, 132.8 us, 1.30% latency, 212.53 MFLOPS, in_features=84, out_features=84, bias=True)
          )
        )
      )
    )
  )
  (fc4): Linear(850, 0.93% Params, 3.36 KMACs, 0.13% MACs, 110.15 us, 1.08% latency, 61.01 MFLOPS, in_features=84, out_features=10, bias=True)
)
------------------------------------------------------------------------------
